E(g)$weight=df$Saldo[1:(nrow(df)-1)]
load("dataset completo.Rda")
data="2012-11-18"
df=subset(dataset,Data.Pesquisa==data)
linha=intersect(as.character(df$Linha.SubLinha),as.character(df$Linha.SubLinha))
d=data.frame(de="a",para="b")
peso=c()
for(onibus in linha){
df1=subset(df,Linha.SubLinha==onibus)
v=df1$Endereco.do.PED
d=rbind(d,data.frame(de=v[1:(length(v)-1)],para=v[2:length(v)]))
peso=c(peso,df1$Saldo[1:(nrow(df1)-1)])
}
d=d[2:nrow(d),]
g=graph.data.frame(d,directed=TRUE)
E(g)$weight=peso
v=union(as.character(df$Endereco.do.PED),as.character(df$Endereco.do.PED))
lat=c()
long=c()
for(j in v){
lat=c(lat,df$Latitude[which(df$Endereco.do.PED==j)[1]])
long=c(long,df$Longitude[which(df$Endereco.do.PED==j)[1]])
}
#install.packages("leaflet")
library(leaflet)
library(sp)
meta=data.frame(node=v,lat=lat,lon=long)
#meta=data.frame(node=1:length(D1[,1]),lat=D1[["lat"]],lon=D1[["lon"]])
str(meta)
g=graph.data.frame(d,directed=TRUE,vertices=meta)
gg <- get.data.frame(g, "both")
vert <- gg$vertices
coordinates(vert) <- ~lon+lat
edges <- gg$edges
edges <- lapply(1:nrow(edges), function(i) {
as(rbind(vert[vert$name == edges[i, "from"], ],
vert[vert$name == edges[i, "to"], ]),
"SpatialLines")
})
for (i in seq_along(edges)) {
edges[[i]] <- spChFIDs(edges[[i]], as.character(i))
}
edges <- do.call(rbind, edges)
leaflet(vert) %>% addTiles() %>% addPolylines(data = edges, weight = 1.5, opacity = 0.15, color = "black", fillOpacity = 0.9) %>% addCircleMarkers(color = "red",radius=1)
load("dataset completo.Rda")
pos=which(dataset$Endereco.do.PED=="AVE PADRE JOSE MAURICIO 46                                            ")
dataset$Latitude[pos]=-19.94964
dataset$Longitude[pos]=-43.99045
pos=which(dataset$Endereco.do.PED=="RUA FORMIGA 294                                                       ")
dataset$Latitude[pos]=-19.90432
dataset$Longitude[pos]=-43.94531
pos=which(dataset$Endereco.do.PED=="AVE BERNARDO MONTEIRO 390                                             ")
dataset$Latitude[pos]=-19.92130
dataset$Longitude[pos]=-43.92722
dias=union(as.character(dataset$Dia.Semana),as.character(dataset$Dia.Semana))
rotas=intersect(dataset$Rota,dataset$Rota)
df=subset(dataset,Dia.Semana==dias[3])
DF=df
df=subset(dataset,Rota==rotas[1])
linha=intersect(as.character(df$Linha.SubLinha),as.character(df$Linha.SubLinha))
d=data.frame(de="a",para="b")
peso=c()
for(onibus in linha){
df1=subset(df,Linha.SubLinha==onibus)
periodo=nrow(df1)/max(df1$Sequencia.do.PED)
v=df1$Endereco.do.PED[1:max(df1$Sequencia.do.PED)]
d=rbind(d,data.frame(de=v[1:(length(v)-1)],para=v[2:length(v)]))
}
d=d[2:nrow(d),]
d=na.omit(d)
g=graph.data.frame(d,directed=TRUE)
g=simplify(g)
elos=get.edgelist(g)
peso=c()
for(rua in elos[,1]){
peso=c(peso,sum(df$Saldo[which(df$Endereco.do.PED==rua)]))
}
E(g)$weight=peso
g1=g
df=subset(dataset,Rota==rotas[2])
linha=intersect(as.character(df$Linha.SubLinha),as.character(df$Linha.SubLinha))
d=data.frame(de="a",para="b")
peso=c()
for(onibus in linha){
df1=subset(df,Linha.SubLinha==onibus)
periodo=nrow(df1)/max(df1$Sequencia.do.PED)
v=df1$Endereco.do.PED[1:max(df1$Sequencia.do.PED)]
d=rbind(d,data.frame(de=v[1:(length(v)-1)],para=v[2:length(v)]))
}
d=d[2:nrow(d),]
d=na.omit(d)
g=graph.data.frame(d,directed=TRUE)
g=simplify(g)
elos=get.edgelist(g)
peso=c()
for(rua in elos[,1]){
peso=c(peso,sum(df$Saldo[which(df$Endereco.do.PED==rua)]))
}
E(g)$weight=peso
g2=g
df=subset(dataset,Rota==rotas[3])
linha=intersect(as.character(df$Linha.SubLinha),as.character(df$Linha.SubLinha))
d=data.frame(de="a",para="b")
peso=c()
for(onibus in linha){
df1=subset(df,Linha.SubLinha==onibus)
periodo=nrow(df1)/max(df1$Sequencia.do.PED)
v=df1$Endereco.do.PED[1:max(df1$Sequencia.do.PED)]
d=rbind(d,data.frame(de=v[1:(length(v)-1)],para=v[2:length(v)]))
}
d=d[2:nrow(d),]
d=na.omit(d)
g=graph.data.frame(d,directed=TRUE)
g=simplify(g)
elos=get.edgelist(g)
peso=c()
for(rua in elos[,1]){
peso=c(peso,sum(df$Saldo[which(df$Endereco.do.PED==rua)]))
}
E(g)$weight=peso
g3=g
e1=as.data.frame(get.edgelist(g1))
e1=rbind(e1,as.data.frame(get.edgelist(g2)))
e1=rbind(e1,as.data.frame(get.edgelist(g3)))
g=graph.data.frame(e1)
E(g)$weight=c(E(g1)$weight,E(g2)$weight,E(g3)$weight)
g=simplify(g)
G=g
library(leaflet)
df=DF
v=union(names(V(G)),names(V(G)))
lat=c()
long=c()
for(j in v){
lat=c(lat,dataset$Latitude[which(dataset$Endereco.do.PED==j)[1]])
long=c(long,dataset$Longitude[which(dataset$Endereco.do.PED==j)[1]])
print(length(lat)-length(V(G)))
}
#install.packages("leaflet")
library(leaflet)
library(sp)
meta=data.frame(node=v,lat=lat,lon=long)
#meta=data.frame(node=1:length(D1[,1]),lat=D1[["lat"]],lon=D1[["lon"]])
str(meta)
g=graph.data.frame(as.data.frame(get.edgelist(G)),directed=TRUE,vertices=meta)
gg <- get.data.frame(g, "both")
vert <- gg$vertices
coordinates(vert) <- ~lon+lat
edges <- gg$edges
edges <- lapply(1:nrow(edges), function(i) {
as(rbind(vert[vert$name == edges[i, "from"], ],
vert[vert$name == edges[i, "to"], ]),
"SpatialLines")
})
for (i in seq_along(edges)) {
edges[[i]] <- spChFIDs(edges[[i]], as.character(i))
}
edges <- do.call(rbind, edges)
leaflet(vert) %>% addTiles() %>% addPolylines(data = edges, weight = 1.5, opacity = 0.15, color = "black", fillOpacity = 0.9) %>% addCircleMarkers(color = rgb(1,0,0,0.3),radius=0.3)
# Informação da rede
c(length(V(G)),length(E(G)))
install.packages("shiny")
install.packages("bslib")
install.packages("sass")
input$dia
}
server <- function(input, output, session){
##creating map
output$map <- renderLeaflet({
leaflet() %>%
addTiles()
})
observe
input <- input$dia
df=subset(dataset,Dia.Semana==dias[input])
DF=df
df=subset(dataset,Rota==rotas[1])
linha=intersect(as.character(df$Linha.SubLinha),as.character(df$Linha.SubLinha))
d=data.frame(de="a",para="b")
peso=c()
for(onibus in linha){
df1=subset(df,Linha.SubLinha==onibus)
periodo=nrow(df1)/max(df1$Sequencia.do.PED)
v=df1$Endereco.do.PED[1:max(df1$Sequencia.do.PED)]
d=rbind(d,data.frame(de=v[1:(length(v)-1)],para=v[2:length(v)]))
}
d=d[2:nrow(d),]
d=na.omit(d)
g=graph.data.frame(d,directed=TRUE)
g=simplify(g)
elos=get.edgelist(g)
peso=c()
for(rua in elos[,1]){
peso=c(peso,sum(df$Saldo[which(df$Endereco.do.PED==rua)]))
}
E(g)$weight=peso
g1=g
df=subset(dataset,Rota==rotas[2])
linha=intersect(as.character(df$Linha.SubLinha),as.character(df$Linha.SubLinha))
d=data.frame(de="a",para="b")
peso=c()
for(onibus in linha){
df1=subset(df,Linha.SubLinha==onibus)
periodo=nrow(df1)/max(df1$Sequencia.do.PED)
v=df1$Endereco.do.PED[1:max(df1$Sequencia.do.PED)]
d=rbind(d,data.frame(de=v[1:(length(v)-1)],para=v[2:length(v)]))
}
d=d[2:nrow(d),]
d=na.omit(d)
g=graph.data.frame(d,directed=TRUE)
g=simplify(g)
elos=get.edgelist(g)
peso=c()
for(rua in elos[,1]){
peso=c(peso,sum(df$Saldo[which(df$Endereco.do.PED==rua)]))
}
E(g)$weight=peso
g2=g
df=subset(dataset,Rota==rotas[3])
linha=intersect(as.character(df$Linha.SubLinha),as.character(df$Linha.SubLinha))
d=data.frame(de="a",para="b")
peso=c()
for(onibus in linha){
df1=subset(df,Linha.SubLinha==onibus)
periodo=nrow(df1)/max(df1$Sequencia.do.PED)
v=df1$Endereco.do.PED[1:max(df1$Sequencia.do.PED)]
d=rbind(d,data.frame(de=v[1:(length(v)-1)],para=v[2:length(v)]))
}
d=d[2:nrow(d),]
d=na.omit(d)
g=graph.data.frame(d,directed=TRUE)
g=simplify(g)
elos=get.edgelist(g)
peso=c()
for(rua in elos[,1]){
peso=c(peso,sum(df$Saldo[which(df$Endereco.do.PED==rua)]))
}
E(g)$weight=peso
g3=g
e1=as.data.frame(get.edgelist(g1))
e1=rbind(e1,as.data.frame(get.edgelist(g2)))
e1=rbind(e1,as.data.frame(get.edgelist(g3)))
g=graph.data.frame(e1)
E(g)$weight=c(E(g1)$weight,E(g2)$weight,E(g3)$weight)
g=simplify(g)
G=g
#plot(E(g)$weight)
#Agora vamos fazer a figura da rede
df=DF
v=union(names(V(G)),names(V(G)))
lat=c()
long=c()
for(j in v){
lat=c(lat,dataset$Latitude[which(dataset$Endereco.do.PED==j)[1]])
long=c(long,dataset$Longitude[which(dataset$Endereco.do.PED==j)[1]])
print(length(lat)-length(V(G)))
}
#install.packages("leaflet")
library(leaflet)
library(sp)
meta=data.frame(node=v,lat=lat,lon=long)
#meta=data.frame(node=1:length(D1[,1]),lat=D1[["lat"]],lon=D1[["lon"]])
str(meta)
g=graph.data.frame(as.data.frame(get.edgelist(G)),directed=TRUE,vertices=meta)
gg <- get.data.frame(g, "both")
vert <- gg$vertices
coordinates(vert) <- ~lon+lat
edges <- gg$edges
edges <- lapply(1:nrow(edges), function(i) {
as(rbind(vert[vert$name == edges[i, "from"], ],
vert[vert$name == edges[i, "to"], ]),
"SpatialLines")
})
for (i in seq_along(edges)) {
edges[[i]] <- spChFIDs(edges[[i]], as.character(i))
}
edges <- do.call(rbind, edges)
leafletProxy("map")%>%
addPolylines(data = edges, weight = 1.5, opacity = 0.15, color = "black", fillOpacity = 0.9) %>%
addCircleMarkers(color = rgb(1,0,0,0.3),radius=0.3)
})
server <- function(input, output, session){
##creating map
output$map <- renderLeaflet({
leaflet() %>%
addTiles()
})
observe
input <- input$dia
df=subset(dataset,Dia.Semana==dias[input])
DF=df
df=subset(dataset,Rota==rotas[1])
linha=intersect(as.character(df$Linha.SubLinha),as.character(df$Linha.SubLinha))
d=data.frame(de="a",para="b")
peso=c()
for(onibus in linha){
df1=subset(df,Linha.SubLinha==onibus)
periodo=nrow(df1)/max(df1$Sequencia.do.PED)
v=df1$Endereco.do.PED[1:max(df1$Sequencia.do.PED)]
d=rbind(d,data.frame(de=v[1:(length(v)-1)],para=v[2:length(v)]))
}
d=d[2:nrow(d),]
d=na.omit(d)
g=graph.data.frame(d,directed=TRUE)
g=simplify(g)
elos=get.edgelist(g)
peso=c()
for(rua in elos[,1]){
peso=c(peso,sum(df$Saldo[which(df$Endereco.do.PED==rua)]))
}
E(g)$weight=peso
g1=g
df=subset(dataset,Rota==rotas[2])
linha=intersect(as.character(df$Linha.SubLinha),as.character(df$Linha.SubLinha))
d=data.frame(de="a",para="b")
peso=c()
for(onibus in linha){
df1=subset(df,Linha.SubLinha==onibus)
periodo=nrow(df1)/max(df1$Sequencia.do.PED)
v=df1$Endereco.do.PED[1:max(df1$Sequencia.do.PED)]
d=rbind(d,data.frame(de=v[1:(length(v)-1)],para=v[2:length(v)]))
}
d=d[2:nrow(d),]
d=na.omit(d)
g=graph.data.frame(d,directed=TRUE)
g=simplify(g)
elos=get.edgelist(g)
peso=c()
for(rua in elos[,1]){
peso=c(peso,sum(df$Saldo[which(df$Endereco.do.PED==rua)]))
}
E(g)$weight=peso
g2=g
df=subset(dataset,Rota==rotas[3])
linha=intersect(as.character(df$Linha.SubLinha),as.character(df$Linha.SubLinha))
d=data.frame(de="a",para="b")
peso=c()
for(onibus in linha){
df1=subset(df,Linha.SubLinha==onibus)
periodo=nrow(df1)/max(df1$Sequencia.do.PED)
v=df1$Endereco.do.PED[1:max(df1$Sequencia.do.PED)]
d=rbind(d,data.frame(de=v[1:(length(v)-1)],para=v[2:length(v)]))
}
d=d[2:nrow(d),]
d=na.omit(d)
g=graph.data.frame(d,directed=TRUE)
g=simplify(g)
elos=get.edgelist(g)
peso=c()
for(rua in elos[,1]){
peso=c(peso,sum(df$Saldo[which(df$Endereco.do.PED==rua)]))
}
E(g)$weight=peso
g3=g
e1=as.data.frame(get.edgelist(g1))
e1=rbind(e1,as.data.frame(get.edgelist(g2)))
e1=rbind(e1,as.data.frame(get.edgelist(g3)))
g=graph.data.frame(e1)
E(g)$weight=c(E(g1)$weight,E(g2)$weight,E(g3)$weight)
g=simplify(g)
G=g
#plot(E(g)$weight)
#Agora vamos fazer a figura da rede
df=DF
v=union(names(V(G)),names(V(G)))
lat=c()
long=c()
for(j in v){
lat=c(lat,dataset$Latitude[which(dataset$Endereco.do.PED==j)[1]])
long=c(long,dataset$Longitude[which(dataset$Endereco.do.PED==j)[1]])
print(length(lat)-length(V(G)))
}
#install.packages("leaflet")
library(leaflet)
library(sp)
meta=data.frame(node=v,lat=lat,lon=long)
#meta=data.frame(node=1:length(D1[,1]),lat=D1[["lat"]],lon=D1[["lon"]])
str(meta)
g=graph.data.frame(as.data.frame(get.edgelist(G)),directed=TRUE,vertices=meta)
gg <- get.data.frame(g, "both")
vert <- gg$vertices
coordinates(vert) <- ~lon+lat
edges <- gg$edges
edges <- lapply(1:nrow(edges), function(i) {
as(rbind(vert[vert$name == edges[i, "from"], ],
vert[vert$name == edges[i, "to"], ]),
"SpatialLines")
})
for (i in seq_along(edges)) {
edges[[i]] <- spChFIDs(edges[[i]], as.character(i))
}
edges <- do.call(rbind, edges)
leafletProxy("map")%>%
addPolylines(data = edges, weight = 1.5, opacity = 0.15, color = "black", fillOpacity = 0.9) %>%
addCircleMarkers(color = rgb(1,0,0,0.3),radius=0.3)
}
library(shiny); runApp('shinyTCC.R')
library(shiny)
library(bslib)
library(sass)
library(leaflet)
library(sp)
##the data
dataset<- source("dataset completo.Rda", local = TRUE)
dataset<- source("/dataset completo.Rda", local = TRUE)
load("~/dataset completo.Rda")
dataset<- source("~/dataset completo.Rda", local = TRUE)
dataset<- load("~/dataset completo.Rda")
runApp('shinyTCC.R')
runApp('shinyTCC.R')
runApp('shinyTCC.R')
dataset<- load("~/dataset completo.Rda")
pos=which(dataset$Endereco.do.PED=="AVE PADRE JOSE MAURICIO 46                                            ")
dataset$Latitude[pos]=-19.94964
dataset$Longitude[pos]=-43.99045
dataset<- load("~/dataset completo.Rda")
dataset
dataset<- load("~/dataset completo.Rda")
View(dataset)
load("C:/Users/allan/Documents/dataset completo.Rda")
View(dataset)
##the data
dataset
pos=which(dataset$Endereco.do.PED=="AVE PADRE JOSE MAURICIO 46                                            ")
dataset$Latitude[pos]=-19.94964
dataset$Longitude[pos]=-43.99045
runApp('shinyTCC.R')
runApp('shinyTCC.R')
load("~/GitHub/bus-network/dataset completo.Rda")
setwd("~/GitHub/bus-network/")
dataset <- load("~/GitHub/bus-network/dataset completo.Rda")##the data
pos=which(dataset$Endereco.do.PED=="AVE PADRE JOSE MAURICIO 46                                            ")
dataset$Latitude[pos]=-19.94964
dataset$Longitude[pos]=-43.99045
pos=which(dataset$Endereco.do.PED=="RUA FORMIGA 294                                                       ")
dataset$Latitude[pos]=-19.90432
dataset$Longitude[pos]=-43.94531
pos=which(dataset$Endereco.do.PED=="AVE BERNARDO MONTEIRO 390                                             ")
dataset$Latitude[pos]=-19.92130
dataset$Longitude[pos]=-43.92722
dias=union(as.character(dataset$Dia.Semana),as.character(dataset$Dia.Semana))
rotas=intersect(dataset$Rota,dataset$Rota)
setwd("~/GitHub/bus-network/")
dataset <- load("~/GitHub/bus-network/dataset completo.RDS")
View(dataset)
saveRDS(dataset, "dataset completo.RDS")
saveRDS(dataset, ""~/GitHub/bus-network/dataset completo.RDS")
setwd("~/GitHub/bus-network")
teste <- readRDS("~/GitHub/bus-network/dataset.RDS")
View(test)
View(teste)
dataset <- readRDS("~/GitHub/bus-network/dataset.RDS")
pos=which(dataset$Endereco.do.PED=="AVE PADRE JOSE MAURICIO 46                                            ")
dataset$Latitude[pos]=-19.94964
dataset$Longitude[pos]=-43.99045
pos=which(dataset$Endereco.do.PED=="RUA FORMIGA 294                                                       ")
dataset$Latitude[pos]=-19.90432
dataset$Longitude[pos]=-43.94531
pos=which(dataset$Endereco.do.PED=="AVE BERNARDO MONTEIRO 390                                             ")
dataset$Latitude[pos]=-19.92130
dataset$Longitude[pos]=-43.92722
dias=union(as.character(dataset$Dia.Semana),as.character(dataset$Dia.Semana))
rotas=intersect(dataset$Rota,dataset$Rota)
saveRDS(dataset, ""~/GitHub/bus-network/dataset completo.RDS")
saveRDS(dataset, "dataset completo.RDS")
saveRDS(dataset, "~/GitHub/bus-network/dataset completo.RDS")
saveRDS(dataset, "~/GitHub/bus-network/dataset.RDS")
setwd("~/GitHub/bus-network/")
dataset <- readRDS("~/GitHub/bus-network/dataset.RDS")
dias
dias["Quarta    "]
unique(dias)
dias$Quarta
teste <- choices = list("Segunda" = "7",
"Terca" = "2",
"Quarta" = "4",
"Quinta" = "6",
"Sexta" = "5",
"Sabado" = "1",
"Domingo" = "3")
teste <- list("Segunda" = "7",
"Terca" = "2",
"Quarta" = "4",
"Quinta" = "6",
"Sexta" = "5",
"Sabado" = "1",
"Domingo" = "3")
teste
dias[3]
dias
library(shiny); runApp('~/shinyTCC.R')
dataset <- readRDS("~/GitHub/bus-network/dataset.RDS")
githubURL <- "https://github.com/thefactmachine/hex-binning-gis-data/raw/master/popDensity.RData"
load(url(githubURL))
head(df)test
githubURL <- "https://github.com/allana-tb/bus-network/blob/main/dataset.RDS"
teste <-load(url(githubURL))
head(teste)
runApp('~/bus-network')
getwd()
dataset <- readRDS("dataset.RDS")
runApp('~/bus-network')
runApp('~/bus-network')
runApp('~/bus-network')
runApp('~/bus-network')
runApp('~/bus-network')
reactive()
runApp('~/bus-network')
runApp('~/bus-network')
runApp('~/bus-network')
runApp('~/bus-network')
runApp('~/bus-network')
